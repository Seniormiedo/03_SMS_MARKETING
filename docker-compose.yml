# version: '3.8'  # Obsolete, removed to avoid warnings

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sms_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sms_password}
      POSTGRES_DB: ${POSTGRES_DB:-sms_marketing}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres.conf:/etc/postgresql/postgresql.conf
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "15432:5432"
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries='pg_stat_statements'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sms_user} -d ${POSTGRES_DB:-sms_marketing}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: sms_redis
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "16379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: sms_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-sms_user}:${POSTGRES_PASSWORD:-sms_password}@postgres:5432/${POSTGRES_DB:-sms_marketing}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker for SMS Processing
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sms_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-sms_user}:${POSTGRES_PASSWORD:-sms_password}@postgres:5432/${POSTGRES_DB:-sms_marketing}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower for Monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: sms_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A app.workers.celery_app flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped

  # Telegram Bot Service
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: sms_bot
    environment:
      - BOT_DB_HOST=postgres
      - BOT_DB_PORT=5432
      - BOT_DB_NAME=${POSTGRES_DB:-sms_marketing}
      - BOT_DB_USER=${POSTGRES_USER:-sms_user}
      - BOT_DB_PASSWORD=${POSTGRES_PASSWORD:-sms_password}
      - BOT_TELEGRAM_BOT_TOKEN=${BOT_TELEGRAM_BOT_TOKEN}
      - BOT_TELEGRAM_BOT_USERNAME=${BOT_TELEGRAM_BOT_USERNAME:-RNumbeRs_bot}
      - BOT_BOT_ENVIRONMENT=production
      - BOT_BOT_LOG_LEVEL=INFO
      - BOT_MAX_EXTRACTION_AMOUNT=10000
      - BOT_MAX_DAILY_EXTRACTIONS=50000
      - BOT_MAX_HOURLY_EXTRACTIONS=20
      - BOT_ENABLE_RATE_LIMITING=true
      - BOT_ENABLE_AUDIT_LOG=true
    volumes:
      - ./bot/exports:/app/exports
      - ./bot/logs:/app/logs
    command: ["python", "telegram_production.py"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: sms_nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: sms_marketing_network