# Configuración mínima optimizada solo para base de datos
# Sin transferencia masiva de contexto

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sms_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sms_password}
      POSTGRES_DB: ${POSTGRES_DB:-sms_marketing}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "15432:5432"
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries='pg_stat_statements'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sms_user} -d ${POSTGRES_DB:-sms_marketing}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: sms_redis
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "16379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: sms_marketing_network